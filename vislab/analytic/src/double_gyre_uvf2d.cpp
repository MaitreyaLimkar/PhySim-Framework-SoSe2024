#include <vislab/analytic/double_gyre_uvf2d.hpp>

namespace vislab
{
    DoubleGyreUVF2d::DoubleGyreUVF2d()
        : A(0.1, 0, 1)
        , eps(0.25, 0, 1)
        , omega(EIGEN_PI / 5., 0, 2 * EIGEN_PI)
        , IUnsteadyVectorField2d(Eigen::AlignedBox3d(Eigen::Vector3d(0, 0, 0), Eigen::Vector3d(2, 1, 10)))
    {
    }

    DoubleGyreUVF2d::DoubleGyreUVF2d(double A, double eps, double omega)
        : A(A, 0, 1)
        , eps(eps, 0, 1)
        , omega(omega, 0, 2 * EIGEN_PI)
        , IUnsteadyVectorField2d(Eigen::AlignedBox3d(Eigen::Vector3d(0, 0, 0), Eigen::Vector3d(2, 1, 10)))
    {
    }

    Eigen::Vector2d DoubleGyreUVF2d::sample(const Eigen::Vector3d& pos) const
    {
        double x = pos.x(), y = pos.y(), t = pos.z();
        double A     = this->A.getValue();
        double eps   = this->eps.getValue();
        double omega = this->omega.getValue();
        return Eigen::Vector2d(-EIGEN_PI * A * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
    }

    Eigen::Vector2d DoubleGyreUVF2d::samplePartial(const Eigen::Vector3d& pos, const DerivativeDegree& derivative) const
    {
        double x = pos.x(), y = pos.y(), t = pos.z();
        double A     = this->A.getValue();
        double eps   = this->eps.getValue();
        double omega = this->omega.getValue();
        if (derivative == DerivativeDegree(1, 0, 0)) // x-partial
            return Eigen::Vector2d(-EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), 2 * EIGEN_PI * A * eps * sin(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 1, 0)) // y-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * A * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 0, 1)) // t-partial
            return Eigen::Vector2d(-EIGEN_PI * EIGEN_PI * A * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(2, 0, 0)) // xx-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), -6 * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 3) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(1, 1, 0)) // xy-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y), 2 * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 2, 0)) // yy-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), -EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(1, 0, 1)) // xt-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), -2 * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) + 2 * EIGEN_PI * A * eps * omega * cos(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 1, 1)) // yt-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 0, 2)) // tt-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), -EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) + EIGEN_PI * A * (2 * eps * omega * omega * sin(omega * t) - 2 * eps * omega * omega * sin(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(3, 0, 0)) // xxx-partial
            return Eigen::Vector2d(6 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 3) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 4) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 12 * EIGEN_PI * EIGEN_PI * A * eps * eps * sin(omega * t) * sin(omega * t) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 12 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(2, 1, 0)) // xxy-partial
            return Eigen::Vector2d(2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y), -6 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 3) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y));
        if (derivative == DerivativeDegree(1, 2, 0)) // xyy-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 3, 0)) // yyy-partial
            return Eigen::Vector2d(-EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y), -EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y));
        if (derivative == DerivativeDegree(2, 0, 1)) // xxt-partial
            return Eigen::Vector2d(2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + 2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * A * eps * omega * cos(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 3) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 6 * EIGEN_PI * EIGEN_PI * A * eps * omega * cos(omega * t) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 6 * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 3 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 6 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(1, 1, 1)) // xyt-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y), -2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + 2 * EIGEN_PI * EIGEN_PI * A * eps * omega * cos(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 2, 1)) // yyt-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(1, 0, 2)) // xtt-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + 2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * omega * sin(omega * t) - 2 * eps * omega * omega * sin(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t), 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 4 * EIGEN_PI * EIGEN_PI * A * eps * omega * cos(omega * t) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (2 * eps * omega * omega * sin(omega * t) - 2 * eps * omega * omega * sin(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * eps * sin(omega * t) * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1, 2) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 4 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 2 * EIGEN_PI * A * eps * omega * omega * sin(omega * t) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 1, 2)) // ytt-partial
            return Eigen::Vector2d(EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y), -EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - 2 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * omega * sin(omega * t) - 2 * eps * omega * omega * sin(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y));
        if (derivative == DerivativeDegree(0, 0, 3)) // ttt-partial
            return Eigen::Vector2d(3 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) + EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 3) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * omega * omega * cos(omega * t) * x - eps * omega * omega * omega * cos(omega * t) * x * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * cos(EIGEN_PI * y), EIGEN_PI * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 3) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 3 * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (2 * eps * omega * omega * omega * cos(omega * t) * x - eps * omega * omega * omega * cos(omega * t) * x * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 3 * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * omega * sin(omega * t) - 2 * eps * omega * omega * sin(omega * t) * x) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * sin(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 3 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * omega * cos(omega * t) * x - 2 * eps * omega * cos(omega * t)) * pow(eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x, 2) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) - 3 * EIGEN_PI * EIGEN_PI * EIGEN_PI * A * (2 * eps * sin(omega * t) * x - 2 * eps * sin(omega * t) + 1) * (eps * omega * cos(omega * t) * x * x - 2 * eps * omega * cos(omega * t) * x) * (2 * eps * omega * omega * sin(omega * t) * x - eps * omega * omega * sin(omega * t) * x * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y) + EIGEN_PI * A * (2 * eps * omega * omega * omega * cos(omega * t) - 2 * eps * omega * omega * omega * cos(omega * t) * x) * cos(EIGEN_PI * (eps * sin(omega * t) * x * x + (1 - 2 * eps * sin(omega * t)) * x)) * sin(EIGEN_PI * y));
        return Eigen::Vector2d(0, 0);
    }
}
